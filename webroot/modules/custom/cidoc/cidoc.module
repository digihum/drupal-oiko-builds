<?php

/**
 * @file
 * Contains CIDOC module.
 */

use Drupal\cidoc\Entity\CidocEntityBundle;
use Drupal\cidoc\Entity\CidocProperty;
use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Render\Element;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_entity_extra_field_info().
 */
function cidoc_entity_extra_field_info() {
  return \Drupal::service('cidoc.hook_implementations')->entity_extra_field_info();
}

/**
 * Implements hook_ENTITY_TYPE_storage_load().
 */
function cidoc_cidoc_entity_storage_load($entities) {
  // Populate temporal and geospatial data ahead of caching.
  if (\Drupal::state()->get('cidoc.populate_temporal_date_for_cache', 1)) {
    /** @var \Drupal\cidoc\Entity\CidocEntity $entity */
    foreach ($entities as $entity) {
      $entity->getTemporalInformation();
      $entity->getGeospatialData();
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * CidocEntity::getReferences() uses the entity query to get properties
 * references, but it needs the property names in the result in order to group
 * them. Entity query results are produced with fetchAllKeyed() so all we need
 * to do is change the second field to be the property column. Also sort by
 * property name.
 */
function cidoc_query_cidoc_entity_get_properties_alter(\Drupal\Core\Database\Query\AlterableInterface $query) {
  /** @var \Drupal\Core\Database\Query\Select $query */
  $fields = &$query->getFields();
  $existing_fields = array_keys($fields);
  $fields[$existing_fields[0]]['field'] = 'property';
  $fields = array_reverse($fields);

  $query->orderBy($existing_fields[1]);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * \Drupal\cidoc\Controller\CidocEntityReferencesController::propertiesForPopulation()
 * uses the entity query to get referenced properties from & to an entity, but
 * it only really needs the opposite endpoint IDs and the property bundle,
 * rather than the reference IDs. Since entity query results are produced with
 * fetchAllKeyed() we need unique values in the first column. We replace the
 * fields with two expressions that are concatenations of the needed fields.
 * Also add a sort for more predicatable behaviour.
 */
function cidoc_query_cidoc_get_properties_for_population_alter(\Drupal\Core\Database\Query\AlterableInterface $query) {
  /** @var \Drupal\Core\Database\Query\Select $query */
  $fields = &$query->getFields();
  $id_field = reset($fields);
  $base_table = $id_field['table'];
  $id_field = $id_field['field'];
  $fields = array();

  $all_conditions = $query->conditions();
  /** @var \Drupal\Core\Database\Query\Condition $all_conditions_obj */
  $all_conditions_obj = $all_conditions[0]['field'];
  $orred_conditions = $all_conditions_obj->conditions();
  /** @var \Drupal\Core\Database\Query\Condition $domain_condition_obj */
  $domain_condition_obj = $orred_conditions[0]['field'];
  $domain_condition = $domain_condition_obj->conditions();
  /** @var \Drupal\Core\Database\Query\Condition $range_condition_obj */
  $range_condition_obj = $orred_conditions[1]['field'];
  $range_condition = $range_condition_obj->conditions();

  $query->addExpression('CONCAT(' . $base_table . '.' . $id_field . ",':'," . $base_table . '.property)', 'id_property');
  $domain_field = $domain_condition[0]['field'];
  $range_field = $range_condition[0]['field'];
  $query->addExpression('CONCAT(' . $domain_field . ",'>'," . $range_field . ')', 'opposite_endpoint');

  $query->orderBy($base_table . '.' . $id_field);
}

/**
 * Implements hook_query_TAG_alter().
 */
function cidoc_query_cidoc_entity_access_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // If an account can view all unpublished CIDOC entities, then there's nothing to do here.
  if ($account->hasPermission('view unpublished cidoc entities')) {
    return;
  }
  else {

    $tables = $query->getTables();
    $base_table = $query->getMetaData('base_table');
    // If the base table is not given, default to one of the node base tables.
    if (!$base_table) {
      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
      $table_mapping = \Drupal::entityTypeManager()->getStorage('cidoc_entity')->getTableMapping();
      $cidoc_entity_base_tables = $table_mapping->getTableNames();

      foreach ($tables as $table_info) {
        if (!($table_info instanceof SelectInterface)) {
          $table = $table_info['table'];
          // Ensure that 'cidoc_entity' and 'cidoc_entity_field_data' are always preferred over
          // 'node_revision' and 'node_field_revision'.
          if ($table == 'cidoc_entity' || $table == 'cidoc_entity_field_data') {
            $base_table = $table;
            break;
          }
          // If one of the node base tables are in the query, add it to the list
          // of possible base tables to join against.
          if (in_array($table, $cidoc_entity_base_tables)) {
            $base_table = $table;
          }
        }
      }

      // Bail out if the base table is missing.
      if (!$base_table) {
        throw new Exception(t('Query tagged for cidoc_entity access but there is no cidoc_entity table, specify the base_table using meta data.'));
      }
    }

    // Find all instances of the base table being joined -- could appear
    // more than once in the query, and could be aliased. Add conditions to each.
    foreach ($tables as $nalias => $tableinfo) {
      $table = $tableinfo['table'];
      if (!($table instanceof SelectInterface) && $table == $base_table) {

        if ($account->hasPermission('view own unpublished cidoc entities')) {

          $condition = new Condition('OR');
          $condition->condition($table . '.status', 1);
          $own_condition = (new Condition('AND'))
            ->condition($table . '.status', 0)
            ->condition($table . '.user_id', $account->id());
          $condition->condition($own_condition);
          $query->condition($condition);
        }
        else {
          // Enforce published entities only.
          $query->condition($table . '.status', 1);
        }
      }
    }

  }

}

/**
 * Implements hook_theme().
 */
function cidoc_theme() {
  $theme = [];
  $file = 'cidoc.theme.inc';
  $theme['cidoc_entity'] = [
    'render element' => 'elements',
    'file' => $file,
    'template' => 'cidoc_entity',
  ];
  $theme['cidoc_reference'] = [
    'render element' => 'elements',
    'file' => $file,
    'template' => 'cidoc_reference',
  ];
  $theme['cidoc_reference_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => $file,
  ];
  $theme['cidoc_properties_references_widget'] = [
    'render element' => 'element',
    'file' => $file,
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cidoc_theme_suggestions_cidoc_entity(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#cidoc_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cidoc_entity__' . $sanitized_view_mode;
  $suggestions[] = 'cidoc_entity__' . $entity->bundle();
  $suggestions[] = 'cidoc_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cidoc_entity__' . $entity->id();
  $suggestions[] = 'cidoc_entity__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cidoc_theme_suggestions_cidoc_reference(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#cidoc_reference'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cidoc_reference__' . $sanitized_view_mode;
  $suggestions[] = 'cidoc_reference__' . $entity->bundle();
  $suggestions[] = 'cidoc_reference__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cidoc_reference__' . $entity->id();
  $suggestions[] = 'cidoc_reference__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_library_info_alter().
 */
function cidoc_library_info_alter(array &$libraries, $module) {
  if ($module === 'toolbar' && isset($libraries['toolbar'])) {
    // Override the leaflet library to a local version.
    $libraries['toolbar']['dependencies'][] = 'cidoc/cidoc.toolbar';
  }
}
