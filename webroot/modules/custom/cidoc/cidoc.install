<?php

/**
 * @file
 * Install, update and uninstall functions for the CIDOC module.
 */

use Drupal\cidoc\Entity\CidocEntityBundle;
use Drupal\cidoc\Entity\CidocProperty;
use Drupal\cidoc\Entity\CidocPropertyInterface;
use Drupal\cidoc\Entity\CidocReference;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_update_dependencies().
 */
function cidoc_update_dependencies() {
  // The update function that adds the status field must run after
  // content_translation_update_8400() which fixes NULL values for the
  // 'content_translation_status' field.
  if (\Drupal::moduleHandler()->moduleExists('content_translation')) {
    $dependencies['cidoc'][8400] = [
      'content_translation' => 8400,
    ];

    return $dependencies;
  }
}

/**
 * Add 'populated' field to 'cidoc' entities.
 */
function cidoc_update_8001() {
  // Install the definition that this field had in
  // \Drupal\cidoc\Entity\CidocEntity::baseFieldDefinitions()
  // at the time that this update function was written.
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Content populated'))
    ->setDescription(t('A boolean indicating whether the CIDOC entity has been populated.'))
    ->setDefaultValue(FALSE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('populated', 'cidoc_entity', 'cidoc', $storage_definition);

  $database = \Drupal::database();
  $database->update('cidoc_entity')
    ->fields(array('populated' => 0))
    ->execute();
}

/**
 * Hide internal_name field on cidoc entity forms.
 */
function cidoc_update_8002() {
  // Query by filtering on the ID as this is more efficient than filtering
  // on the entity_type property directly.
  $displays = \Drupal::entityQuery('entity_form_display')
    ->condition('id', 'cidoc_entity.', 'STARTS_WITH')
    ->condition('id', '.default', 'ENDS_WITH')
    ->execute();
  if ($displays = EntityFormDisplay::loadMultiple($displays)) {
    /** @var EntityFormDisplay $display */
    foreach ($displays as $display) {
      $display->removeComponent('internal_name');
      $display->save();
    }
  }

  $update_manager = \Drupal::entityDefinitionUpdateManager();

  /** @var BaseFieldDefinition $storage_definition */
  $storage_definition = $update_manager->getFieldStorageDefinition('internal_name', 'cidoc_entity');
  $storage_definition->setDisplayOptions('form', array('type' => 'hidden'));

  $update_manager->updateFieldStorageDefinition($storage_definition);
}


/**
 * Fix broken CIDOC references.
 */
function cidoc_update_8101() {
  $references = \Drupal::entityQuery('cidoc_reference')
    ->execute();
  if ($references = CidocReference::loadMultiple($references)) {
    /** @var CidocReference $reference */
    foreach ($references as $reference) {
      if ($reference->domain->isEmpty() || $reference->range->isEmpty()) {
        $reference->delete();
      }
    }
  }
}

/**
 * Change field widgets to our squid widgets.
 */
function cidoc_update_8102() {
  \Drupal::service('module_installer')->install(['squid_autocomplete']);
  $fields = \Drupal::entityQuery('entity_form_display')
    ->condition('id', 'cidoc_reference.', 'STARTS_WITH')
    ->condition('id', '.domain', 'ENDS_WITH')
    ->execute();
  if ($fields = EntityFormDisplay::loadMultiple($fields)) {
    /** @var EntityFormDisplay $field */
    foreach ($fields as $field) {
      $settings = $field->getComponent('range');
      if ($settings['type'] === 'entity_reference_autocomplete_tags') {
        $settings['type'] = 'squid_entity_reference_autocomplete_tags';
      }
      $field->setComponent('range', $settings);
      $field->save();
    }
  }

  $fields = \Drupal::entityQuery('entity_form_display')
    ->condition('id', 'cidoc_reference.', 'STARTS_WITH')
    ->condition('id', '.range', 'ENDS_WITH')
    ->execute();
  if ($fields = EntityFormDisplay::loadMultiple($fields)) {
    /** @var EntityFormDisplay $field */
    foreach ($fields as $field) {
      $settings = $field->getComponent('domain');
      if ($settings['type'] === 'entity_reference_autocomplete_tags') {
        $settings['type'] = 'squid_entity_reference_autocomplete_tags';
      }
      $field->setComponent('domain', $settings);
      $field->save();
    }
  }

  $fields = \Drupal::entityQuery('entity_form_display')
    ->condition('id', 'cidoc_reference.', 'STARTS_WITH')
    ->condition('id', '.default', 'ENDS_WITH')
    ->execute();
  if ($fields = EntityFormDisplay::loadMultiple($fields)) {
    /** @var EntityFormDisplay $field */
    foreach ($fields as $field) {
      $settings = $field->getComponent('domain');
      if ($settings['type'] === 'entity_reference_autocomplete_tags') {
        $settings['type'] = 'squid_entity_reference_autocomplete_tags';
      }
      $field->setComponent('domain', $settings);
      $settings = $field->getComponent('range');
      if ($settings['type'] === 'entity_reference_autocomplete_tags') {
        $settings['type'] = 'squid_entity_reference_autocomplete_tags';
      }
      $field->setComponent('range', $settings);
      $field->save();
    }
  }
}

/**
 * Give content editors permission to view the cidoc entity overview page.
 */
function cidoc_update_8103() {
  $role = \Drupal\user\Entity\Role::load('content_editor');
  $role->grantPermission('access cidoc entity overview');
  $role->save();

  $view = \Drupal\views\Views::getView('cidoc_entities');
  $view->setDisplay('default');
  $view->display_handler->setOption('access', array(
    'type' => 'perm',
    'options' => array(
      'perm' => 'access cidoc entity overview',
    ),
  ));
  $view->setDisplay('page_1');
  $view->display_handler->setOption('path', 'admin/cidoc/cidoc-entities');
  $view->save();
}

/**
 * Clean up references that reference entities that have been deleted.
 */
function cidoc_update_8104() {
  $references = \Drupal::entityQuery('cidoc_reference')
    ->execute();
  $messages = [];
  foreach ($references as $reference) {
    if ($entity = CidocReference::load($reference)) {
      $domain = $entity->domain->entity;
      $range = $entity->range->entity;
      if (empty($domain) || empty($range)) {
        $messages[] = t('Deleting reference: @ref', array('@ref' => $reference));
        $entity->delete();
      }
    }
  }

  return implode(', ', $messages);
}

/**
 * Add the 'published' and revisionable metadata fields to cidoc_entity.
 */
function cidoc_update_8400() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Add the published entity key and revisionable metadata fields to the
  // my_entity entity type.
  $entity_type = $definition_update_manager->getEntityType('cidoc_entity');
  $entity_type_id = $entity_type->id();

  $entity_keys = $entity_type->getKeys();
  $entity_keys['published'] = 'status';
  $entity_type->set('entity_keys', $entity_keys);

  $revision_metadata_keys = [
    'revision_user' => 'revision_user_id',
    'revision_created' => 'revision_created',
    'revision_log_message' => 'revision_log_message'
  ];
  $entity_type->set('revision_metadata_keys', $revision_metadata_keys);

  $definition_update_manager->updateEntityType($entity_type);

  // Update the status field.
  $status = $definition_update_manager->getFieldStorageDefinition('status', $entity_type_id);
  $status
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE);
  $definition_update_manager->updateFieldStorageDefinition($status);

  // Add the revision metadata fields.
  $revision_created = BaseFieldDefinition::create('created')
    ->setLabel(t('Revision create time'))
    ->setDescription(t('The time that the current revision was created.'))
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_created', $entity_type_id, $entity_type_id, $revision_created);

  $revision_user = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Revision user'))
    ->setDescription(t('The user ID of the author of the current revision.'))
    ->setSetting('target_type', 'user')
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_user_id', $entity_type_id, $entity_type_id, $revision_user);

  $revision_log_message = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Revision log message'))
    ->setDescription(t('Briefly describe the changes you have made.'))
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => [
        'rows' => 4,
      ],
    ]);
  $definition_update_manager->installFieldStorageDefinition('revision_log_message', $entity_type_id, $entity_type_id, $revision_log_message);

  return t('@entity_type_label has been converted to revisionable and publishable.', ['@entity_type_label' => $entity_type->getLabel()]);
}

/**
 * Add the 'published' and revisionable metadata fields to cidoc_entity.
 */
function cidoc_update_8401() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Add the published entity key and revisionable metadata fields to the
  // my_entity entity type.
  $entity_type = $definition_update_manager->getEntityType('cidoc_entity');

  $definition_update_manager->updateEntityType($entity_type);

  // Update the citation field.
  $status = $definition_update_manager->getFieldStorageDefinition('citation', 'cidoc_entity');
  $status
    ->setRevisionable(TRUE);

  $definition_update_manager->updateFieldStorageDefinition($status);
}

/**
 * Add the 'published' and revisionable metadata fields to cidoc_reference.
 */
function cidoc_update_8402() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Add the published entity key and revisionable metadata fields to the
  // my_entity entity type.
  $entity_type = $definition_update_manager->getEntityType('cidoc_reference');
  $entity_type_id = $entity_type->id();

  $entity_keys = $entity_type->getKeys();
  $entity_keys['published'] = 'status';
  $entity_type->set('entity_keys', $entity_keys);

  $revision_metadata_keys = [
    'revision_user' => 'revision_user_id',
    'revision_created' => 'revision_created',
    'revision_log_message' => 'revision_log_message'
  ];
  $entity_type->set('revision_metadata_keys', $revision_metadata_keys);

  $definition_update_manager->updateEntityType($entity_type);

  // Update the citation field.
  $citation = $definition_update_manager->getFieldStorageDefinition('citation', 'cidoc_entity');
  $citation
    ->setRevisionable(TRUE);

  $definition_update_manager->updateFieldStorageDefinition($citation);

  // Add the status field.
  $status = BaseFieldDefinition::create('boolean')
    ->setLabel(new \Drupal\Core\StringTranslation\TranslatableMarkup('Published'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(TRUE);

  $has_content_translation_status_field = \Drupal::moduleHandler()->moduleExists('content_translation') && $definition_update_manager->getFieldStorageDefinition('content_translation_status', $entity_type_id);
  if ($has_content_translation_status_field) {
    $status->setInitialValueFromField('content_translation_status');
  }
  else {
    $status->setInitialValue(TRUE);
  }
  $definition_update_manager->installFieldStorageDefinition('status', $entity_type_id, $entity_type_id, $status);

  // Add the revision metadata fields.
  $revision_created = BaseFieldDefinition::create('created')
    ->setLabel(t('Revision create time'))
    ->setDescription(t('The time that the current revision was created.'))
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_created', $entity_type_id, $entity_type_id, $revision_created);

  $revision_user = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Revision user'))
    ->setDescription(t('The user ID of the author of the current revision.'))
    ->setSetting('target_type', 'user')
    ->setRevisionable(TRUE);
  $definition_update_manager->installFieldStorageDefinition('revision_user_id', $entity_type_id, $entity_type_id, $revision_user);

  $revision_log_message = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Revision log message'))
    ->setDescription(t('Briefly describe the changes you have made.'))
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => [
        'rows' => 4,
      ],
    ]);
  $definition_update_manager->installFieldStorageDefinition('revision_log_message', $entity_type_id, $entity_type_id, $revision_log_message);

  // Uninstall the 'content_translation_status' field if needed.
  $database = \Drupal::database();
  if ($has_content_translation_status_field) {
    // First we have to remove the field data.
    $database->update($entity_type->getDataTable())
      ->fields(['content_translation_status' => NULL])
      ->execute();

    // A site may have disabled revisionability for this entity type.
    if ($entity_type->isRevisionable()) {
      $database->update($entity_type->getRevisionDataTable())
        ->fields(['content_translation_status' => NULL])
        ->execute();
    }

    $content_translation_status = $definition_update_manager->getFieldStorageDefinition('content_translation_status', 'my_entity');
    $definition_update_manager->uninstallFieldStorageDefinition($content_translation_status);
  }

  return t('@entity_type_label has been converted to revisionable and publishable.', ['@entity_type_label' => $entity_type->getLabel()]);
}

/**
 * Populate the cidoc_reference status field.
 */
function cidoc_update_8403() {
  // Ideally we'd do better at updating the value of existing entities, but this will do.
  \Drupal::database()->update('cidoc_reference')
    ->fields(array('status' => TRUE))
    ->execute();
}

/**
 * Update the config format of subwidgets.
 */
function cidoc_update_8404() {
  foreach (Cache::getBins() as $bin) {
    $bin->deleteAll();
  }
  $properties = \Drupal::entityQuery('cidoc_property')
    ->execute();
  foreach ($properties as $property) {
    if ($entity = CidocProperty::load($property)) {
      $old_settings = $entity->timesubwidget;
      $new_settings = [
        'domain' => [
          'type' => CidocPropertyInterface::SubWidgetTypeNormal,
        ],
        'range' => [
          'type' => CidocPropertyInterface::SubWidgetTypeNormal,
        ],
      ];
      if (!empty($old_settings['domain'])) {
        $new_settings['domain']['type'] = CidocPropertyInterface::SubWidgetTypeTime;
      }
      if (!empty($old_settings['range'])) {
        $new_settings['range']['type'] = CidocPropertyInterface::SubWidgetTypeTime;
      }
      $entity->timesubwidget = $new_settings;
      $entity->save();
    }
  }
}

/**
 * Update the config format entity bundles.
 */
function cidoc_update_8405() {
  foreach (Cache::getBins() as $bin) {
    $bin->deleteAll();
  }
  $bundles = \Drupal::entityQuery('cidoc_entity_bundle')
    ->execute();
  foreach ($bundles as $bundle) {
    if ($entity = CidocEntityBundle::load($bundle)) {
      $entity->save();
    }
  }
}
